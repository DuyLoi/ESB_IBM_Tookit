BROKER SCHEMA Version1.GetPaymentsInfo.ESQLs

DECLARE ns NAMESPACE 'http://www.tpb.vn/entity/vn/remit/receiving/1';
DECLARE soa NAMESPACE 'http://www.tpb.vn/common/envelope/soaenvelope/1';
DECLARE common NAMESPACE 'http://www.tpb.vn/common/envelope/commonheader/1';

CREATE COMPUTE MODULE GetPaymentsRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE FNCODE_GET_ACCEPTED CHARACTER 'REMIT_GET_ACCEPTED_DB_XCUR';
		DECLARE FNCODE_GET_SETTLED CHARACTER 'REMIT_GET_SETTLED_DB_XCUR';
		DECLARE StateGetAccepted CHARACTER 'ACCEPTED';
		DECLARE StateGetSettled CHARACTER 'EXECUTED';
		DECLARE State CHARACTER '';
		DECLARE ConnectionRole CHARACTER 'RECEIVING';
		DECLARE URL_GET_PAYMENTS, access_token CHARACTER;
		DECLARE getDateTimeNow GMTTIMESTAMP CURRENT_GMTTIMESTAMP;
		DECLARE dateTimeFormatIU CHARACTER;

		Declare srcFormat CHARACTER; -- Source (Incoming time stamp format)
		Declare targetFormat CHARACTER; -- Target (Expected time stamp format)
		
		DECLARE InTime GMTTIMESTAMP; 
		SET srcFormat = 'yyyy-MM-dd HH:mm:ss.SSSZ';
		--SET targetFormat = 'yyyy-MM-dd''T''HH:mm:ss.SSSZ';
		SET targetFormat = 'IU';
		-- Converting string into time stamp of same format.
		SET InTime = cast(getDateTimeNow as GMTTIMESTAMP FORMAT srcFormat);
		-- Converting time stamp to string of target format.
		SET dateTimeFormatIU = cast(InTime as CHARACTER FORMAT targetFormat); 

		DECLARE FunctionCode CHARACTER Environment.Variables.GetPayment.Functioncode;
		IF FunctionCode = FNCODE_GET_ACCEPTED THEN
			SET State = StateGetAccepted;
			
			SET OutputLocalEnvironment.Destination.HTTP.QueryString.range_field = 'EXPIRES_AT';
			SET OutputLocalEnvironment.Destination.HTTP.QueryString.after = dateTimeFormatIU;
		ELSEIF FunctionCode = FNCODE_GET_SETTLED THEN
			SET State = StateGetSettled;
			DECLARE LABEL_COMPLETE CHARACTER;
			CALL Remit.Common.ESQLs.getPartnerConfigValue('XCURRENT.LABEL_COMPLETE') INTO LABEL_COMPLETE;
			SET OutputLocalEnvironment.Destination.HTTP.QueryString.without_labels = LABEL_COMPLETE;
		ELSE
			CALL ErrorHandlers.Common.ESQLs.throwSOAException(002, '016','No matching FuntionCode');
		END IF;
		SET access_token = Environment.Variables.Auth.AccessToken;

		CALL Remit.Common.ESQLs.getPartnerConfigValue('XCURRENT.URL_PAYMENT') INTO URL_GET_PAYMENTS;
		
		SET OutputRoot.HTTPRequestHeader."Access-Control-Request-Method"= 'GET';
		SET OutputRoot.HTTPRequestHeader."Authorization"= 'Bearer ' || access_token;
		SET OutputLocalEnvironment.Destination.HTTP.QueryString.state= State;
		SET OutputLocalEnvironment.Destination.HTTP.QueryString.connector_role= ConnectionRole;
		SET OutputLocalEnvironment.Destination.HTTP.QueryString.sort_field = 'CREATED_AT';
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = URL_GET_PAYMENTS;

		DECLARE refEnv REFERENCE TO Environment.Variables.SOAVariables.UserDefined.AdditionalInformation;
		DECLARE SaveTargetLog CHARACTER 'off';
		CALL Service.Utils.ESQLs.getUDFConfig('SOAConfig','SaveTargetLog',refEnv) INTO SaveTargetLog;
		IF (SaveTargetLog = 'on') THEN
			SET Environment.Variables.Log.Logtype = 'DB';
			DECLARE addIndx INTEGER CARDINALITY(Environment.Variables.SOAVariables.soa:SOAEnvelope.soa:SOAServiceHeader.soa:SOACommonDetail.common:AdditionalInformation.common:NameValuePairs[]);
			SET Environment.Variables.SOAVariables.soa:SOAEnvelope.soa:SOAServiceHeader.soa:SOACommonDetail.common:AdditionalInformation.common:NameValuePairs[addIndx+1].common:Name = 'TARGETID';
			SET Environment.Variables.SOAVariables.soa:SOAEnvelope.soa:SOAServiceHeader.soa:SOACommonDetail.common:AdditionalInformation.common:NameValuePairs[addIndx+1].common:Value = 'XCURRENT';

			SET Environment.Variables.SOAVariables.soa:SOAEnvelope.soa:SOAServiceHeader.soa:SOACommonDetail.common:AdditionalInformation.common:NameValuePairs[addIndx+2].common:Name = 'TARGETSERVICE';
			SET Environment.Variables.SOAVariables.soa:SOAEnvelope.soa:SOAServiceHeader.soa:SOACommonDetail.common:AdditionalInformation.common:NameValuePairs[addIndx+2].common:Value = URL_GET_PAYMENTS;
			SET Environment.Variables.Log.Message = 'Access_token: ' || access_token || '; State: ' || State || '; Connector_role: ' || ConnectionRole;
			PROPAGATE TO TERMINAL 'out1' FINALIZE NONE DELETE NONE;
		END IF;
		SET Environment.Variables.Log.Logtype = '';
		RETURN TRUE;
	END;
END MODULE;